using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;
using Newtonsoft.Json;
using System;
using System.IO;
using System.Linq;
using System.Globalization;

namespace Xandimmersion.Geppetto
{
    public class GeppettoControllerARKit : MonoBehaviour
    {
        // Define a class to represent my API response
        [System.Serializable]
        private class Response
        {
            public string tts { get; set; }
            public List<List<object>> phonemes_list { get; set; }
        }


        //I can also use emotional      -> 100%
        //string fakeAPIResponse = "{\"tts\": \"https://tts-storage-xi.s3.us-east-2.amazonaws.com/1d5bde37-90d6-46c4-95e2-a9d919cc598f.wav\", \"phonemes_list\": [[\"AY\",4.561,30],[\"K\",4.633816666666666,30],[\"AE\",4.7066333333333334,30],[\"N\",4.77945,30],[\"AO\",4.852266666666667,30],[\"L\",4.925083333333333,30],[\"S\",4.9979,30],[\"OW\",5.070716666666667,30],[\"Y\",5.143533333333333,30],[\"UW\",5.21635,30],[\"S\",5.289166666666667,30],[\"IH\",5.361983333333333,30],[\"M\",5.4348,30],[\"OW\",5.507616666666666,30],[\"SH\",5.580433333333334,30],[\"AH\",5.65325,30],[\"N\",5.726066666666666,30],[\"AH\",5.798883333333333,30],[\"L\",5.8717,30],[\"V\",5.944516666666667,30],[\"OY\",6.017333333333333,30],[\"S\",6.0901499999999995,30],[\"AH\",6.162966666666667,30],[\"Z\",6.235783333333333,30],[\"AH\",6.3086,30],[\"N\",6.3814166666666665,30],[\"D\",6.454233333333333,30],[\"AH\",6.52705,30],[\"D\",6.599866666666667,30],[\"AE\",6.6726833333333335,30],[\"P\",6.7455,30],[\"T\",6.818316666666666,30],[\"AH\",6.891133333333333,30],[\"N\",6.9639500000000005,30],[\"D\",7.036766666666667,30],[\"R\",7.109583333333333,30],[\"AH\",7.1823999999999995,30],[\"N\",7.255216666666667,30],[\"T\",7.328033333333334,30],[\"AY\",7.40085,30],[\"M\",7.4736666666666665,30],[\"T\",7.546483333333333,30],[\"UW\",7.6193,30],[\"DH\",7.692116666666667,30],[\"AH\",7.7649333333333335,30],[\"S\",7.83775,30],[\"IH\",7.910566666666666,30],[\"CH\",7.983383333333334,30],[\"UW\",8.0562,30],[\"EY\",8.129016666666667,30],[\"SH\",8.201833333333333,30],[\"AH\",8.27465,30],[\"N\",8.347466666666667,30],[\"IH\",8.420283333333334,30],[\"N\",8.4931,30],[\"DH\",8.565916666666666,30],[\"AH\",8.638733333333333,30],[\"G\",8.71155,30],[\"EY\",8.784366666666667,30],[\"M\",8.857183333333333,30],[\"PAUSE\",8.93,0],[\"T\",9.402000000000001,30],[\"UW\",9.469677966101695,30],[\"G\",9.537355932203392,30],[\"IH\",9.605033898305086,30],[\"V\",9.67271186440678,30],[\"DH\",9.740389830508475,30],[\"AH\",9.808067796610171,30],[\"S\",9.875745762711865,30],[\"T\",9.94342372881356,30],[\"AO\",10.011101694915254,30],[\"R\",10.07877966101695,30],[\"IY\",10.146457627118645,30],[\"T\",10.21413559322034,30],[\"EH\",10.281813559322035,30],[\"L\",10.34949152542373,30],[\"IH\",10.417169491525424,30],[\"NG\",10.484847457627119,30],[\"T\",10.552525423728815,30],[\"IY\",10.62020338983051,30],[\"M\",10.687881355932204,30],[\"IY\",10.755559322033898,30],[\"V\",10.823237288135594,30],[\"IH\",10.890915254237289,30],[\"N\",10.958593220338983,30],[\"M\",11.02627118644068,30],[\"AO\",11.093949152542374,30],[\"R\",11.161627118644068,30],[\"F\",11.229305084745762,30],[\"L\",11.296983050847459,30],[\"EH\",11.364661016949153,30],[\"K\",11.432338983050848,30],[\"S\",11.500016949152544,30],[\"AH\",11.567694915254238,30],[\"B\",11.635372881355933,30],[\"IH\",11.703050847457627,30],[\"L\",11.770728813559321,30],[\"AH\",11.838406779661018,30],[\"T\",11.906084745762712,30],[\"IY\",11.973762711864408,30],[\"T\",12.041440677966103,30],[\"UW\",12.109118644067797,30],[\"R\",12.176796610169491,30],[\"AY\",12.244474576271186,30],[\"T\",12.312152542372882,30],[\"DH\",12.379830508474576,30],[\"AH\",12.44750847457627,30],[\"S\",12.515186440677967,30],[\"T\",12.582864406779661,30],[\"AO\",12.650542372881356,30],[\"R\",12.71822033898305,30],[\"IY\",12.785898305084746,30],[\"Z\",12.85357627118644,30],[\"DH\",12.921254237288135,30],[\"EY\",12.988932203389831,30],[\"W\",13.056610169491526,30],[\"AA\",13.12428813559322,30],[\"N\",13.191966101694915,30],[\"T\",13.259644067796609,30],[\"PAUSE\",13.395,0]] }";
        //I'm not only a forest ranger  -> 100%
        //string fakeAPIResponse = "{\"tts\": \"https://tts-storage-xi.s3.us-east-2.amazonaws.com/1d5bde37-90d6-46c4-95e2-a9d919cc598f.wav\", \"phonemes_list\": [[\"AY\",0.05499999999999999,30],[\"M\",0.13635714285714287,30],[\"N\",0.21771428571428572,30],[\"AA\",0.29907142857142865,30],[\"T\",0.38042857142857145,30],[\"OW\",0.46178571428571435,30],[\"N\",0.5431428571428573,30],[\"L\",0.6245,30],[\"IY\",0.705857142857143,30],[\"AE\",0.7872142857142859,30],[\"N\",0.8685714285714287,30],[\"EH\",0.9499285714285716,30],[\"L\",1.0312857142857144,30],[\"F\",1.1126428571428573,30],[\"PAUSE\",1.194,0],[\"AY\",1.511,30],[\"AE\",1.5803999999999998,30],[\"M\",1.6498,30],[\"AO\",1.7191999999999998,30],[\"L\",1.7886,30],[\"S\",1.8579999999999999,30],[\"OW\",1.9274,30],[\"AH\",1.9968,30],[\"F\",2.0662,30],[\"AO\",2.1355999999999997,30],[\"R\",2.205,30],[\"AH\",2.2744,30],[\"S\",2.3438,30],[\"T\",2.4132,30],[\"R\",2.4826,30],[\"EY\",2.552,30],[\"N\",2.6214,30],[\"JH\",2.6908,30],[\"ER\",2.7601999999999998,30],[\"PAUSE\",2.899,0],[\"M\",3.451,30],[\"AY\",3.516034482758621,30],[\"D\",3.5810689655172414,30],[\"UW\",3.6461034482758623,30],[\"T\",3.7111379310344828,30],[\"IY\",3.7761724137931036,30],[\"IH\",3.841206896551724,30],[\"Z\",3.906241379310345,30],[\"T\",3.9712758620689654,30],[\"UW\",4.036310344827587,30],[\"P\",4.101344827586208,30],[\"R\",4.166379310344828,30],[\"AH\",4.231413793103449,30],[\"T\",4.29644827586207,30],[\"EH\",4.36148275862069,30],[\"K\",4.426517241379311,30],[\"T\",4.491551724137931,30],[\"DH\",4.556586206896553,30],[\"AH\",4.621620689655173,30],[\"F\",4.6866551724137935,30],[\"AO\",4.751689655172415,30],[\"R\",4.816724137931035,30],[\"AH\",4.881758620689656,30],[\"S\",4.946793103448277,30],[\"T\",5.0118275862068975,30],[\"AH\",5.076862068965518,30],[\"N\",5.141896551724138,30],[\"D\",5.206931034482759,30],[\"AO\",5.27196551724138,30],[\"L\",5.337000000000001,30],[\"DH\",5.402034482758621,30],[\"AH\",5.467068965517242,30],[\"L\",5.532103448275863,30],[\"IH\",5.597137931034483,30],[\"V\",5.662172413793105,30],[\"IH\",5.727206896551725,30],[\"NG\",5.7922413793103456,30],[\"TH\",5.857275862068967,30],[\"IH\",5.9223103448275864,30],[\"NG\",5.987344827586208,30],[\"Z\",6.052379310344828,30],[\"DH\",6.117413793103449,30],[\"AE\",6.18244827586207,30],[\"T\",6.2474827586206905,30],[\"IH\",6.312517241379311,30],[\"N\",6.377551724137932,30],[\"HH\",6.442586206896553,30],[\"AE\",6.507620689655173,30],[\"B\",6.5726551724137945,30],[\"AH\",6.637689655172415,30],[\"T\",6.702724137931035,30],[\"DH\",6.767758620689657,30],[\"AH\",6.832793103448276,30],[\"EH\",6.897827586206898,30],[\"R\",6.962862068965518,30],[\"IY\",7.0278965517241385,30],[\"AH\",7.09293103448276,30],[\"PAUSE\",7.223000000000001,0],[\"HH\",7.853000000000001,30],[\"AW\",7.919083333333335,30],[\"M\",7.985166666666668,30],[\"EY\",8.051250000000001,30],[\"AY\",8.117333333333335,30],[\"HH\",8.183416666666668,30],[\"EH\",8.249500000000001,30],[\"L\",8.315583333333334,30],[\"P\",8.381666666666668,30],[\"Y\",8.447750000000001,30],[\"UW\",8.513833333333334,30],[\"PAUSE\",8.646,0],[\"S\",9.192,30],[\"T\",9.258375000000001,30],[\"R\",9.32475,30],[\"EY\",9.391125,30],[\"N\",9.457500000000001,30],[\"JH\",9.523875,30],[\"ER\",9.590250000000001,30],[\"PAUSE\",9.723,0]] }";
        //i've been waiting             -> probl√®me niveau des respirations
        //string fakeAPIResponse = "{\"tts\": \"https://tts-storage-xi.s3.us-east-2.amazonaws.com/1d5bde37-90d6-46c4-95e2-a9d919cc598f.wav\", \"phonemes_list\": [[\"AY\",5.574,30],[\"V\",5.6560625,30],[\"B\",5.738125,30],[\"IH\",5.8201875,30],[\"N\",5.9022499999999996,30],[\"W\",5.9843125,30],[\"EY\",6.066375,30],[\"T\",6.1484375,30],[\"IH\",6.2305,30],[\"NG\",6.3125625,30],[\"IH\",6.394625,30],[\"N\",6.4766875,30],[\"F\",6.55875,30],[\"R\",6.6408125,30],[\"AH\",6.722875,30],[\"N\",6.8049375,30],[\"T\",6.8870000000000005,30],[\"AH\",6.9690625,30],[\"V\",7.051125000000001,30],[\"DH\",7.1331875,30],[\"IH\",7.215250000000001,30],[\"S\",7.2973125,30],[\"S\",7.379375,30],[\"T\",7.461437500000001,30],[\"AO\",7.5435,30],[\"R\",7.625562500000001,30],[\"F\",7.707625,30],[\"AO\",7.789687499999999,30],[\"R\",7.8717500000000005,30],[\"AE\",7.9538125,30],[\"AW\",8.035875,30],[\"ER\",8.1179375,30],[\"Z\",8.2,30],[\"N\",8.2820625,30],[\"AW\",8.364125,30],[\"AH\",8.4461875,30],[\"N\",8.52825,30],[\"D\",8.6103125,30],[\"W\",8.692375,30],[\"AH\",8.774437500000001,30],[\"N\",8.8565,30],[\"AH\",8.9385625,30],[\"V\",9.020625,30],[\"DH\",9.1026875,30],[\"AH\",9.184750000000001,30],[\"EH\",9.2668125,30],[\"M\",9.348875,30],[\"P\",9.4309375,30],[\"L\",9.513,30],[\"OY\",9.595062500000001,30],[\"IY\",9.677125,30],[\"Z\",9.7591875,30],[\"JH\",9.84125,30],[\"AH\",9.923312500000002,30],[\"S\",10.005375,30],[\"T\",10.0874375,30],[\"T\",10.1695,30],[\"OW\",10.2515625,30],[\"L\",10.333625000000001,30],[\"D\",10.4156875,30],[\"M\",10.49775,30],[\"IY\",10.5798125,30],[\"DH\",10.661875,30],[\"AE\",10.743937500000001,30],[\"T\",10.826,30],[\"DH\",10.9080625,30],[\"EY\",10.990125,30],[\"W\",11.072187500000002,30],[\"IH\",11.154250000000001,30],[\"L\",11.2363125,30],[\"B\",11.318375,30],[\"IY\",11.4004375,30],[\"K\",11.482500000000002,30],[\"L\",11.564562500000001,30],[\"OW\",11.646625,30],[\"Z\",11.7286875,30],[\"D\",11.81075,30],[\"T\",11.892812500000002,30],[\"AH\",11.974875,30],[\"D\",12.0569375,30],[\"EY\",12.139000000000001,30],[\"B\",12.2210625,30],[\"IH\",12.303125000000001,30],[\"K\",12.3851875,30],[\"AO\",12.46725,30],[\"Z\",12.549312500000001,30],[\"AH\",12.631375000000002,30],[\"V\",12.713437500000001,30],[\"S\",12.7955,30],[\"AH\",12.8775625,30],[\"M\",12.959625,30],[\"N\",13.041687500000002,30],[\"AE\",13.123750000000001,30],[\"SH\",13.2058125,30],[\"AH\",13.287875,30],[\"N\",13.3699375,30],[\"AH\",13.452000000000002,30],[\"L\",13.534062500000001,30],[\"HH\",13.616125,30],[\"AA\",13.698187500000001,30],[\"L\",13.78025,30],[\"AH\",13.862312500000002,30],[\"D\",13.944375,30],[\"EY\",14.0264375,30],[\"AO\",14.108500000000001,30],[\"R\",14.1905625,30],[\"S\",14.272625000000001,30],[\"AH\",14.3546875,30],[\"M\",14.436750000000002,30],[\"TH\",14.518812500000001,30],[\"IH\",14.600875,30],[\"NG\",14.682937500000001,30],[\"PAUSE\",14.765,0],[\"DH\",15.672,30],[\"IH\",15.72994117647059,30],[\"S\",15.787882352941178,30],[\"IH\",15.845823529411764,30],[\"Z\",15.903764705882352,30],[\"AH\",15.961705882352941,30],[\"N\",16.01964705882353,30],[\"B\",16.07758823529412,30],[\"AH\",16.135529411764708,30],[\"L\",16.193470588235293,30],[\"IY\",16.251411764705882,30],[\"V\",16.30935294117647,30],[\"AH\",16.36729411764706,30],[\"B\",16.42523529411765,30],[\"AH\",16.483176470588237,30],[\"L\",16.541117647058822,30],[\"PAUSE\",16.657,0],[\"W\",17.362,30],[\"EH\",17.42802222222222,30],[\"R\",17.494044444444445,30],[\"AE\",17.560066666666664,30],[\"M\",17.626088888888887,30],[\"AY\",17.69211111111111,30],[\"G\",17.758133333333333,30],[\"OW\",17.824155555555553,30],[\"IH\",17.890177777777776,30],[\"NG\",17.9562,30],[\"T\",18.022222222222222,30],[\"UW\",18.08824444444444,30],[\"G\",18.154266666666665,30],[\"EH\",18.220288888888888,30],[\"T\",18.28631111111111,30],[\"DH\",18.35233333333333,30],[\"AH\",18.418355555555554,30],[\"P\",18.484377777777777,30],[\"AA\",18.5504,30],[\"R\",18.61642222222222,30],[\"T\",18.682444444444442,30],[\"AY\",18.748466666666666,30],[\"N\",18.81448888888889,30],[\"IY\",18.880511111111108,30],[\"D\",18.94653333333333,30],[\"T\",19.012555555555554,30],[\"UW\",19.078577777777777,30],[\"F\",19.144599999999997,30],[\"IH\",19.21062222222222,30],[\"K\",19.276644444444443,30],[\"S\",19.342666666666666,30],[\"M\",19.408688888888886,30],[\"AY\",19.47471111111111,30],[\"B\",19.540733333333332,30],[\"AA\",19.606755555555555,30],[\"R\",19.672777777777775,30],[\"B\",19.738799999999998,30],[\"IH\",19.80482222222222,30],[\"K\",19.870844444444444,30],[\"Y\",19.936866666666663,30],[\"UW\",20.002888888888886,30],[\"N\",20.06891111111111,30],[\"AW\",20.134933333333333,30],[\"PAUSE\",20.333,0]] }";
        //i've been waiting
        //string fakeAPIResponse = "{\"tts\": \"https://tts-storage-xi.s3.us-east-2.amazonaws.com/1d5bde37-90d6-46c4-95e2-a9d919cc598f.wav\", \"phonemes_list\": [[\"AY\",5.5649999999999995,30],[\"V\",5.633945945945945,30],[\"B\",5.702891891891891,30],[\"IH\",5.771837837837837,30],[\"N\",5.840783783783784,30],[\"W\",5.9097297297297295,30],[\"EY\",5.978675675675675,30],[\"T\",6.047621621621621,30],[\"IH\",6.116567567567567,30],[\"NG\",6.185513513513513,30],[\"IH\",6.254459459459459,30],[\"N\",6.323405405405405,30],[\"F\",6.392351351351351,30],[\"R\",6.461297297297297,30],[\"AH\",6.530243243243243,30],[\"N\",6.599189189189189,30],[\"T\",6.6681351351351354,30],[\"AH\",6.737081081081081,30],[\"V\",6.806027027027027,30],[\"DH\",6.874972972972973,30],[\"IH\",6.943918918918919,30],[\"S\",7.012864864864865,30],[\"S\",7.08181081081081,30],[\"T\",7.150756756756757,30],[\"AO\",7.219702702702703,30],[\"R\",7.288648648648649,30],[\"F\",7.357594594594595,30],[\"AO\",7.4265405405405405,30],[\"R\",7.495486486486487,30],[\"AE\",7.564432432432432,30],[\"AW\",7.633378378378379,30],[\"ER\",7.702324324324325,30],[\"Z\",7.7712702702702705,30],[\"N\",7.8402162162162155,30],[\"AW\",7.909162162162162,30],[\"AH\",7.978108108108109,30],[\"N\",8.047054054054055,30],[\"D\",8.116000000000001,30],[\"PAUSE\",8.116000000000001,30],[\"AH\",8.533000000000001,30],[\"N\",8.601103448275863,30],[\"AH\",8.669206896551726,30],[\"V\",8.737310344827588,30],[\"DH\",8.80541379310345,30],[\"AH\",8.87351724137931,30],[\"EH\",8.941620689655174,30],[\"M\",9.009724137931036,30],[\"P\",9.077827586206897,30],[\"L\",9.145931034482759,30],[\"OY\",9.214034482758622,30],[\"IY\",9.282137931034484,30],[\"Z\",9.350241379310345,30],[\"JH\",9.418344827586209,30],[\"AH\",9.48644827586207,30],[\"S\",9.554551724137932,30],[\"T\",9.622655172413793,30],[\"T\",9.690758620689657,30],[\"OW\",9.758862068965518,30],[\"L\",9.82696551724138,30],[\"D\",9.895068965517243,30],[\"M\",9.963172413793105,30],[\"IY\",10.031275862068966,30],[\"DH\",10.099379310344828,30],[\"AE\",10.16748275862069,30],[\"T\",10.235586206896553,30],[\"DH\",10.303689655172414,30],[\"EY\",10.371793103448276,30],[\"W\",10.43989655172414,30],[\"IH\",10.508000000000001,30],[\"PAUSE\",10.508000000000001,30],[\"B\",10.959000000000001,30],[\"IY\",11.028952380952383,30],[\"K\",11.098904761904762,30],[\"L\",11.168857142857144,30],[\"OW\",11.238809523809525,30],[\"Z\",11.308761904761907,30],[\"D\",11.378714285714286,30],[\"T\",11.448666666666668,30],[\"AH\",11.51861904761905,30],[\"D\",11.588571428571429,30],[\"EY\",11.65852380952381,30],[\"B\",11.728476190476192,30],[\"IH\",11.798428571428573,30],[\"K\",11.868380952380953,30],[\"AO\",11.938333333333334,30],[\"Z\",12.008285714285716,30],[\"AH\",12.078238095238095,30],[\"V\",12.148190476190477,30],[\"S\",12.218142857142858,30],[\"AH\",12.288095238095238,30],[\"M\",12.35804761904762,30],[\"N\",12.428,30],[\"PAUSE\",12.428,30],[\"SH\",12.779,30],[\"AH\",12.847862068965517,30],[\"N\",12.916724137931034,30],[\"AH\",12.985586206896551,30],[\"L\",13.05444827586207,30],[\"HH\",13.123310344827587,30],[\"AA\",13.192172413793104,30],[\"L\",13.261034482758621,30],[\"AH\",13.329896551724138,30],[\"D\",13.398758620689655,30],[\"EY\",13.467620689655172,30],[\"AO\",13.536482758620691,30],[\"R\",13.605344827586208,30],[\"S\",13.674206896551725,30],[\"AH\",13.743068965517242,30],[\"M\",13.81193103448276,30],[\"TH\",13.880793103448276,30],[\"IH\",13.949655172413793,30],[\"NG\",14.01851724137931,30],[\"PAUSE\",14.776000000000002,0],[\"DH\",15.67,30],[\"IH\",15.738466666666666,30],[\"S\",15.806933333333333,30],[\"IH\",15.875399999999999,30],[\"Z\",15.943866666666665,30],[\"AH\",16.012333333333334,30],[\"N\",16.0808,30],[\"B\",16.149266666666666,30],[\"AH\",16.21773333333333,30],[\"L\",16.2862,30],[\"IY\",16.354666666666667,30],[\"V\",16.423133333333332,30],[\"AH\",16.4916,30],[\"B\",16.560066666666668,30],[\"AH\",16.628533333333333,30],[\"L\",16.697,30],[\"PAUSE\",16.697,0],[\"W\",17.359,30],[\"EH\",17.428558139534886,30],[\"R\",17.49811627906977,30],[\"AE\",17.567674418604653,30],[\"M\",17.637232558139537,30],[\"AY\",17.70679069767442,30],[\"G\",17.776348837209305,30],[\"OW\",17.84590697674419,30],[\"IH\",17.915465116279073,30],[\"NG\",17.985023255813957,30],[\"T\",18.05458139534884,30],[\"UW\",18.12413953488372,30],[\"G\",18.193697674418605,30],[\"EH\",18.26325581395349,30],[\"T\",18.332813953488373,30],[\"DH\",18.402372093023256,30],[\"AH\",18.47193023255814,30],[\"P\",18.541488372093024,30],[\"AA\",18.611046511627908,30],[\"R\",18.680604651162792,30],[\"T\",18.750162790697676,30],[\"AY\",18.81972093023256,30],[\"N\",18.889279069767444,30],[\"IY\",18.958837209302327,30],[\"D\",19.02839534883721,30],[\"T\",19.097953488372095,30],[\"UW\",19.16751162790698,30],[\"F\",19.237069767441863,30],[\"IH\",19.306627906976747,30],[\"K\",19.37618604651163,30],[\"S\",19.445744186046515,30],[\"M\",19.5153023255814,30],[\"AY\",19.584860465116282,30],[\"B\",19.654418604651166,30],[\"AA\",19.723976744186047,30],[\"R\",19.79353488372093,30],[\"B\",19.863093023255814,30],[\"IH\",19.932651162790698,30],[\"K\",20.002209302325582,30],[\"Y\",20.071767441860466,30],[\"UW\",20.14132558139535,30],[\"N\",20.210883720930234,30],[\"AW\",20.280441860465118,30],[\"PAUSE\",20.35,0]] }";



        [HideInInspector] public TextAsset VisemeFile;
        [HideInInspector] public float lipSyncAmplitude_boost;
        [HideInInspector] public int max_ampl = 30;
        [HideInInspector] public int min_ampl = 0;
        [HideInInspector] public float speed;
        [HideInInspector] public string text;
        [HideInInspector] public string voice = "Ada_tp"; //or guard_neutral;
        private string format = "default";

        private string apiPath = "https://new-convinceme-api.xandimmersion.com/geppetto-get-phonemes/";
        private UnityWebRequest www;
        private Response myResponse;
     
        //Time variable
        private double gtime;
        private double rtime;
        private double audioTime;
        private double timepassed;
        private double differenceAudioTiming;
        [HideInInspector] public float audioStartTime;
        [HideInInspector] public GameObject audioPlayed;

        private AudioClip audioReceived;
        private string streamingtts;

        [HideInInspector] public ParametersController.TransitionFunction transitionFunction;

        //Blink
        private bool isBlinking;
        private List<int> blinkIndex;
        [HideInInspector] public bool blink = false;
        [HideInInspector] public List<string> blinkBlendNames;
        [HideInInspector] public SkinnedMeshRenderer blinkMesh;
        [HideInInspector] public float blinkInterval;
        [HideInInspector] public float blinkRandomVariation;
        [HideInInspector] public float blinkSpeed;

        private Dictionary<string, Dictionary<string, float>> blendShapesDictionary;

        // To headShift rig function
        private Quaternion initialHeadRigRotation;
        private float blendshapeAmplitude;
        private float newblendShapeValueAmplitude;
        //private Quaternion currentBaseHeadRigRotation;
        private float newblendShapeValueAmplitudeTime;

        // Reference to the bone controlling the Head -> headShifting : Armature/CC_Base_BoneRoot/CC_Base_Spine02/CC_Base_NeckTwist02/CC_Base_Head
        [HideInInspector] public Transform BaseHeadRig; 

        // Work on more than one MeshRenderer
        [HideInInspector] public List<SkinnedMeshRenderer> body_parts_SK;
       
        private bool isTalking;
        public bool IsTalking
        {
            get { return isTalking; }
            set { isTalking = value; }
        }
        [HideInInspector] public float maxRangeBlendShapeValue = 100;
        [HideInInspector] public float minRangeBlendShapeValue = 0;

        //private bool isFinishingTalking;
       
        public void Start()
        {            
            /*
            if(gameObject.name == "Young girl with dress"){
                //I can also use emotional      -> 100%
                string fakeAPIResponse = "{\"tts\": \"https://tts-storage-xi.s3.us-east-2.amazonaws.com/1d5bde37-90d6-46c4-95e2-a9d919cc598f.wav\", \"phonemes_list\": [[\"AY\",4.561,30],[\"K\",4.633816666666666,30],[\"AE\",4.7066333333333334,30],[\"N\",4.77945,30],[\"AO\",4.852266666666667,30],[\"L\",4.925083333333333,30],[\"S\",4.9979,30],[\"OW\",5.070716666666667,30],[\"Y\",5.143533333333333,30],[\"UW\",5.21635,30],[\"S\",5.289166666666667,30],[\"IH\",5.361983333333333,30],[\"M\",5.4348,30],[\"OW\",5.507616666666666,30],[\"SH\",5.580433333333334,30],[\"AH\",5.65325,30],[\"N\",5.726066666666666,30],[\"AH\",5.798883333333333,30],[\"L\",5.8717,30],[\"V\",5.944516666666667,30],[\"OY\",6.017333333333333,30],[\"S\",6.0901499999999995,30],[\"AH\",6.162966666666667,30],[\"Z\",6.235783333333333,30],[\"AH\",6.3086,30],[\"N\",6.3814166666666665,30],[\"D\",6.454233333333333,30],[\"AH\",6.52705,30],[\"D\",6.599866666666667,30],[\"AE\",6.6726833333333335,30],[\"P\",6.7455,30],[\"T\",6.818316666666666,30],[\"AH\",6.891133333333333,30],[\"N\",6.9639500000000005,30],[\"D\",7.036766666666667,30],[\"R\",7.109583333333333,30],[\"AH\",7.1823999999999995,30],[\"N\",7.255216666666667,30],[\"T\",7.328033333333334,30],[\"AY\",7.40085,30],[\"M\",7.4736666666666665,30],[\"T\",7.546483333333333,30],[\"UW\",7.6193,30],[\"DH\",7.692116666666667,30],[\"AH\",7.7649333333333335,30],[\"S\",7.83775,30],[\"IH\",7.910566666666666,30],[\"CH\",7.983383333333334,30],[\"UW\",8.0562,30],[\"EY\",8.129016666666667,30],[\"SH\",8.201833333333333,30],[\"AH\",8.27465,30],[\"N\",8.347466666666667,30],[\"IH\",8.420283333333334,30],[\"N\",8.4931,30],[\"DH\",8.565916666666666,30],[\"AH\",8.638733333333333,30],[\"G\",8.71155,30],[\"EY\",8.784366666666667,30],[\"M\",8.857183333333333,30],[\"PAUSE\",8.93,0],[\"T\",9.402000000000001,30],[\"UW\",9.469677966101695,30],[\"G\",9.537355932203392,30],[\"IH\",9.605033898305086,30],[\"V\",9.67271186440678,30],[\"DH\",9.740389830508475,30],[\"AH\",9.808067796610171,30],[\"S\",9.875745762711865,30],[\"T\",9.94342372881356,30],[\"AO\",10.011101694915254,30],[\"R\",10.07877966101695,30],[\"IY\",10.146457627118645,30],[\"T\",10.21413559322034,30],[\"EH\",10.281813559322035,30],[\"L\",10.34949152542373,30],[\"IH\",10.417169491525424,30],[\"NG\",10.484847457627119,30],[\"T\",10.552525423728815,30],[\"IY\",10.62020338983051,30],[\"M\",10.687881355932204,30],[\"IY\",10.755559322033898,30],[\"V\",10.823237288135594,30],[\"IH\",10.890915254237289,30],[\"N\",10.958593220338983,30],[\"M\",11.02627118644068,30],[\"AO\",11.093949152542374,30],[\"R\",11.161627118644068,30],[\"F\",11.229305084745762,30],[\"L\",11.296983050847459,30],[\"EH\",11.364661016949153,30],[\"K\",11.432338983050848,30],[\"S\",11.500016949152544,30],[\"AH\",11.567694915254238,30],[\"B\",11.635372881355933,30],[\"IH\",11.703050847457627,30],[\"L\",11.770728813559321,30],[\"AH\",11.838406779661018,30],[\"T\",11.906084745762712,30],[\"IY\",11.973762711864408,30],[\"T\",12.041440677966103,30],[\"UW\",12.109118644067797,30],[\"R\",12.176796610169491,30],[\"AY\",12.244474576271186,30],[\"T\",12.312152542372882,30],[\"DH\",12.379830508474576,30],[\"AH\",12.44750847457627,30],[\"S\",12.515186440677967,30],[\"T\",12.582864406779661,30],[\"AO\",12.650542372881356,30],[\"R\",12.71822033898305,30],[\"IY\",12.785898305084746,30],[\"Z\",12.85357627118644,30],[\"DH\",12.921254237288135,30],[\"EY\",12.988932203389831,30],[\"W\",13.056610169491526,30],[\"AA\",13.12428813559322,30],[\"N\",13.191966101694915,30],[\"T\",13.259644067796609,30],[\"PAUSE\",13.395,0]] }";
            }

            if (gameObject.name == "Businessman")
            {
                //i've been waiting             -> + tag PAUSE
                string fakeAPIResponse = "{\"tts\": \"https://tts-storage-xi.s3.us-east-2.amazonaws.com/1d5bde37-90d6-46c4-95e2-a9d919cc598f.wav\", \"phonemes_list\": [[\"AY\",5.5649999999999995,30],[\"V\",5.633945945945945,30],[\"B\",5.702891891891891,30],[\"IH\",5.771837837837837,30],[\"N\",5.840783783783784,30],[\"W\",5.9097297297297295,30],[\"EY\",5.978675675675675,30],[\"T\",6.047621621621621,30],[\"IH\",6.116567567567567,30],[\"NG\",6.185513513513513,30],[\"IH\",6.254459459459459,30],[\"N\",6.323405405405405,30],[\"F\",6.392351351351351,30],[\"R\",6.461297297297297,30],[\"AH\",6.530243243243243,30],[\"N\",6.599189189189189,30],[\"T\",6.6681351351351354,30],[\"AH\",6.737081081081081,30],[\"V\",6.806027027027027,30],[\"DH\",6.874972972972973,30],[\"IH\",6.943918918918919,30],[\"S\",7.012864864864865,30],[\"S\",7.08181081081081,30],[\"T\",7.150756756756757,30],[\"AO\",7.219702702702703,30],[\"R\",7.288648648648649,30],[\"F\",7.357594594594595,30],[\"AO\",7.4265405405405405,30],[\"R\",7.495486486486487,30],[\"AE\",7.564432432432432,30],[\"AW\",7.633378378378379,30],[\"ER\",7.702324324324325,30],[\"Z\",7.7712702702702705,30],[\"N\",7.8402162162162155,30],[\"AW\",7.909162162162162,30],[\"AH\",7.978108108108109,30],[\"N\",8.047054054054055,30],[\"D\",8.116000000000001,30],[\"PAUSE\",8.116000000000001,30],[\"AH\",8.533000000000001,30],[\"N\",8.601103448275863,30],[\"AH\",8.669206896551726,30],[\"V\",8.737310344827588,30],[\"DH\",8.80541379310345,30],[\"AH\",8.87351724137931,30],[\"EH\",8.941620689655174,30],[\"M\",9.009724137931036,30],[\"P\",9.077827586206897,30],[\"L\",9.145931034482759,30],[\"OY\",9.214034482758622,30],[\"IY\",9.282137931034484,30],[\"Z\",9.350241379310345,30],[\"JH\",9.418344827586209,30],[\"AH\",9.48644827586207,30],[\"S\",9.554551724137932,30],[\"T\",9.622655172413793,30],[\"T\",9.690758620689657,30],[\"OW\",9.758862068965518,30],[\"L\",9.82696551724138,30],[\"D\",9.895068965517243,30],[\"M\",9.963172413793105,30],[\"IY\",10.031275862068966,30],[\"DH\",10.099379310344828,30],[\"AE\",10.16748275862069,30],[\"T\",10.235586206896553,30],[\"DH\",10.303689655172414,30],[\"EY\",10.371793103448276,30],[\"W\",10.43989655172414,30],[\"IH\",10.508000000000001,30],[\"PAUSE\",10.508000000000001,30],[\"B\",10.959000000000001,30],[\"IY\",11.028952380952383,30],[\"K\",11.098904761904762,30],[\"L\",11.168857142857144,30],[\"OW\",11.238809523809525,30],[\"Z\",11.308761904761907,30],[\"D\",11.378714285714286,30],[\"T\",11.448666666666668,30],[\"AH\",11.51861904761905,30],[\"D\",11.588571428571429,30],[\"EY\",11.65852380952381,30],[\"B\",11.728476190476192,30],[\"IH\",11.798428571428573,30],[\"K\",11.868380952380953,30],[\"AO\",11.938333333333334,30],[\"Z\",12.008285714285716,30],[\"AH\",12.078238095238095,30],[\"V\",12.148190476190477,30],[\"S\",12.218142857142858,30],[\"AH\",12.288095238095238,30],[\"M\",12.35804761904762,30],[\"N\",12.428,30],[\"PAUSE\",12.428,30],[\"SH\",12.779,30],[\"AH\",12.847862068965517,30],[\"N\",12.916724137931034,30],[\"AH\",12.985586206896551,30],[\"L\",13.05444827586207,30],[\"HH\",13.123310344827587,30],[\"AA\",13.192172413793104,30],[\"L\",13.261034482758621,30],[\"AH\",13.329896551724138,30],[\"D\",13.398758620689655,30],[\"EY\",13.467620689655172,30],[\"AO\",13.536482758620691,30],[\"R\",13.605344827586208,30],[\"S\",13.674206896551725,30],[\"AH\",13.743068965517242,30],[\"M\",13.81193103448276,30],[\"TH\",13.880793103448276,30],[\"IH\",13.949655172413793,30],[\"NG\",14.01851724137931,30],[\"PAUSE\",14.776000000000002,0],[\"DH\",15.67,30],[\"IH\",15.738466666666666,30],[\"S\",15.806933333333333,30],[\"IH\",15.875399999999999,30],[\"Z\",15.943866666666665,30],[\"AH\",16.012333333333334,30],[\"N\",16.0808,30],[\"B\",16.149266666666666,30],[\"AH\",16.21773333333333,30],[\"L\",16.2862,30],[\"IY\",16.354666666666667,30],[\"V\",16.423133333333332,30],[\"AH\",16.4916,30],[\"B\",16.560066666666668,30],[\"AH\",16.628533333333333,30],[\"L\",16.697,30],[\"PAUSE\",16.697,0],[\"W\",17.359,30],[\"EH\",17.428558139534886,30],[\"R\",17.49811627906977,30],[\"AE\",17.567674418604653,30],[\"M\",17.637232558139537,30],[\"AY\",17.70679069767442,30],[\"G\",17.776348837209305,30],[\"OW\",17.84590697674419,30],[\"IH\",17.915465116279073,30],[\"NG\",17.985023255813957,30],[\"T\",18.05458139534884,30],[\"UW\",18.12413953488372,30],[\"G\",18.193697674418605,30],[\"EH\",18.26325581395349,30],[\"T\",18.332813953488373,30],[\"DH\",18.402372093023256,30],[\"AH\",18.47193023255814,30],[\"P\",18.541488372093024,30],[\"AA\",18.611046511627908,30],[\"R\",18.680604651162792,30],[\"T\",18.750162790697676,30],[\"AY\",18.81972093023256,30],[\"N\",18.889279069767444,30],[\"IY\",18.958837209302327,30],[\"D\",19.02839534883721,30],[\"T\",19.097953488372095,30],[\"UW\",19.16751162790698,30],[\"F\",19.237069767441863,30],[\"IH\",19.306627906976747,30],[\"K\",19.37618604651163,30],[\"S\",19.445744186046515,30],[\"M\",19.5153023255814,30],[\"AY\",19.584860465116282,30],[\"B\",19.654418604651166,30],[\"AA\",19.723976744186047,30],[\"R\",19.79353488372093,30],[\"B\",19.863093023255814,30],[\"IH\",19.932651162790698,30],[\"K\",20.002209302325582,30],[\"Y\",20.071767441860466,30],[\"UW\",20.14132558139535,30],[\"N\",20.210883720930234,30],[\"AW\",20.280441860465118,30],[\"PAUSE\",20.35,0]] }";
            }

            if (gameObject.name == "Elf Ranger")
            {
                //I'm not only a forest ranger  -> 100%
                string fakeAPIResponse = "{\"tts\": \"https://tts-storage-xi.s3.us-east-2.amazonaws.com/1d5bde37-90d6-46c4-95e2-a9d919cc598f.wav\", \"phonemes_list\": [[\"AY\",0.05499999999999999,30],[\"M\",0.13635714285714287,30],[\"N\",0.21771428571428572,30],[\"AA\",0.29907142857142865,30],[\"T\",0.38042857142857145,30],[\"OW\",0.46178571428571435,30],[\"N\",0.5431428571428573,30],[\"L\",0.6245,30],[\"IY\",0.705857142857143,30],[\"AE\",0.7872142857142859,30],[\"N\",0.8685714285714287,30],[\"EH\",0.9499285714285716,30],[\"L\",1.0312857142857144,30],[\"F\",1.1126428571428573,30],[\"PAUSE\",1.194,0],[\"AY\",1.511,30],[\"AE\",1.5803999999999998,30],[\"M\",1.6498,30],[\"AO\",1.7191999999999998,30],[\"L\",1.7886,30],[\"S\",1.8579999999999999,30],[\"OW\",1.9274,30],[\"AH\",1.9968,30],[\"F\",2.0662,30],[\"AO\",2.1355999999999997,30],[\"R\",2.205,30],[\"AH\",2.2744,30],[\"S\",2.3438,30],[\"T\",2.4132,30],[\"R\",2.4826,30],[\"EY\",2.552,30],[\"N\",2.6214,30],[\"JH\",2.6908,30],[\"ER\",2.7601999999999998,30],[\"PAUSE\",2.899,0],[\"M\",3.451,30],[\"AY\",3.516034482758621,30],[\"D\",3.5810689655172414,30],[\"UW\",3.6461034482758623,30],[\"T\",3.7111379310344828,30],[\"IY\",3.7761724137931036,30],[\"IH\",3.841206896551724,30],[\"Z\",3.906241379310345,30],[\"T\",3.9712758620689654,30],[\"UW\",4.036310344827587,30],[\"P\",4.101344827586208,30],[\"R\",4.166379310344828,30],[\"AH\",4.231413793103449,30],[\"T\",4.29644827586207,30],[\"EH\",4.36148275862069,30],[\"K\",4.426517241379311,30],[\"T\",4.491551724137931,30],[\"DH\",4.556586206896553,30],[\"AH\",4.621620689655173,30],[\"F\",4.6866551724137935,30],[\"AO\",4.751689655172415,30],[\"R\",4.816724137931035,30],[\"AH\",4.881758620689656,30],[\"S\",4.946793103448277,30],[\"T\",5.0118275862068975,30],[\"AH\",5.076862068965518,30],[\"N\",5.141896551724138,30],[\"D\",5.206931034482759,30],[\"AO\",5.27196551724138,30],[\"L\",5.337000000000001,30],[\"DH\",5.402034482758621,30],[\"AH\",5.467068965517242,30],[\"L\",5.532103448275863,30],[\"IH\",5.597137931034483,30],[\"V\",5.662172413793105,30],[\"IH\",5.727206896551725,30],[\"NG\",5.7922413793103456,30],[\"TH\",5.857275862068967,30],[\"IH\",5.9223103448275864,30],[\"NG\",5.987344827586208,30],[\"Z\",6.052379310344828,30],[\"DH\",6.117413793103449,30],[\"AE\",6.18244827586207,30],[\"T\",6.2474827586206905,30],[\"IH\",6.312517241379311,30],[\"N\",6.377551724137932,30],[\"HH\",6.442586206896553,30],[\"AE\",6.507620689655173,30],[\"B\",6.5726551724137945,30],[\"AH\",6.637689655172415,30],[\"T\",6.702724137931035,30],[\"DH\",6.767758620689657,30],[\"AH\",6.832793103448276,30],[\"EH\",6.897827586206898,30],[\"R\",6.962862068965518,30],[\"IY\",7.0278965517241385,30],[\"AH\",7.09293103448276,30],[\"PAUSE\",7.223000000000001,0],[\"HH\",7.853000000000001,30],[\"AW\",7.919083333333335,30],[\"M\",7.985166666666668,30],[\"EY\",8.051250000000001,30],[\"AY\",8.117333333333335,30],[\"HH\",8.183416666666668,30],[\"EH\",8.249500000000001,30],[\"L\",8.315583333333334,30],[\"P\",8.381666666666668,30],[\"Y\",8.447750000000001,30],[\"UW\",8.513833333333334,30],[\"PAUSE\",8.646,0],[\"S\",9.192,30],[\"T\",9.258375000000001,30],[\"R\",9.32475,30],[\"EY\",9.391125,30],[\"N\",9.457500000000001,30],[\"JH\",9.523875,30],[\"ER\",9.590250000000001,30],[\"PAUSE\",9.723,0]] }";
            }

            if (gameObject.name == "Barbie")
            {

            }
            */
            // Store the initial rotation of the head bone
            blendshapeAmplitude = -1f;
            
            // Look if baseHeadRig exists
            if (BaseHeadRig!=null)
            {
                initialHeadRigRotation = BaseHeadRig.rotation;
            }

            IsTalking = false;
            timepassed = 0;
            myResponse = null;
            blinkIndex = new List<int>();
            isBlinking = true;
            StartCoroutine(HelloAPI("https://new-convinceme-api.xandimmersion.com/geppetto-home/"));

            //Test if blendShapes found
            foreach (SkinnedMeshRenderer part in body_parts_SK)
            {
                if (part.sharedMesh.blendShapeCount == 0)
                {
                    blink = false;
                    Debug.LogWarning("No BlendShapes found in the SkinnedMeshRenderer of: " + part.name);
                }
            }

            if (blink)
            {
                if (blinkMesh.sharedMesh.blendShapeCount == 0)
                {
                    blink = false;
                    Debug.LogWarning("(Blink)No BlendShapes found in the SkinnedMeshRenderer of: " + blinkMesh.name);
                }
                else
                {
                    foreach (string blinkBlendName in blinkBlendNames)
                    {
                        blinkIndex.Add(blinkMesh.sharedMesh.GetBlendShapeIndex(blinkBlendName));
                    }
                }
            }

            blendShapesDictionary = UtilityFunctions.ReadBlendShapeFile(body_parts_SK, VisemeFile, true, minRangeBlendShapeValue, maxRangeBlendShapeValue);
        }
        
        private IEnumerator PlayAnimation(string letter, string oldletter, float amplitude, float duration)
        {
            int index;
            int index_old;
            float blendValue;
            float blendValue_old;

            float audioStartTime = audioPlayed.GetComponent<AudioSource>().time;
            float audioEndTime = audioStartTime + duration;
            amplitude = amplitude * lipSyncAmplitude_boost;

            float delta = UtilityFunctions.CalculatePercentage(maxRangeBlendShapeValue, 15f);
            if (amplitude < delta) { amplitude = amplitude + delta; }

            // Comment or Decomment this to see or not : phonems / time / amplitude
            //Debug.Log("PlayAnimation -> Letter: " + letter + " Oldletter: " + oldletter + " AudioStartTime: " + audioStartTime + " AudioEndTime: " + audioEndTime + " duration: " + duration);

            //Calculate the ratio of the current blendshape base on its weight and on the weight of the current phoneme

            //1st case of Animation -> Same letter, nothing to do
            if (letter == oldletter)
            {
                yield break;
            }

            //2nd case of Animation -> set oldletter to 0
            else if (letter == "PAUSE" || letter == null)
            {
                if (oldletter != "PAUSE")
                {
                    if (blendShapesDictionary.ContainsKey(oldletter))
                    {
                        Dictionary<string,float> blendShapes = blendShapesDictionary[oldletter];
                                              
                        while ((audioPlayed.GetComponent<AudioSource>().time < audioEndTime) && audioPlayed.GetComponent<AudioSource>().isPlaying)
                        {
                            float timeProgress = Mathf.InverseLerp(audioStartTime, audioEndTime, audioPlayed.GetComponent<AudioSource>().time);
                            
                            foreach (var blendShape in blendShapes)
                            {
                                foreach (SkinnedMeshRenderer part in body_parts_SK)
                                {
                                    index_old = part.sharedMesh.GetBlendShapeIndex(blendShape.Key);
                                    blendValue_old = part.GetBlendShapeWeight(index_old);
                                    blendValue_old = UtilityFunctions.BlendShapeTransitionFunction(transitionFunction, blendValue_old, minRangeBlendShapeValue, timeProgress, maxRangeBlendShapeValue);
                                    part.SetBlendShapeWeight(index_old, blendValue_old);
                                }
                            }
                            yield return null;
                        }

                        // Set final values to min
                        foreach (var blendShape in blendShapes)
                        {
                            foreach (SkinnedMeshRenderer part in body_parts_SK)
                            {
                                index_old = part.sharedMesh.GetBlendShapeIndex(blendShape.Key);
                                part.SetBlendShapeWeight(index_old, minRangeBlendShapeValue);
                            }
                        }
                    }
                }
            }

            //3rd case of Animation -> set letter to "amplitude"
            else if (oldletter == "PAUSE" || oldletter == null)
            {
                if (letter != "PAUSE")
                {
                    if (blendShapesDictionary.ContainsKey(letter))
                    {
                        Dictionary<string,float> blendShapes = blendShapesDictionary[letter];

                        while ((audioPlayed.GetComponent<AudioSource>().time < audioEndTime) && audioPlayed.GetComponent<AudioSource>().isPlaying)
                        {
                            float timeProgress = Mathf.InverseLerp(audioStartTime, audioEndTime, audioPlayed.GetComponent<AudioSource>().time);
                            
                            foreach (var blendShape in blendShapes)
                            {
                                foreach (SkinnedMeshRenderer part in body_parts_SK)
                                {
                                    index = part.sharedMesh.GetBlendShapeIndex(blendShape.Key);
                                    blendValue_old = part.GetBlendShapeWeight(index);
                                    blendValue = UtilityFunctions.CalculatePercentage(blendShape.Value, amplitude);
                                    blendValue = UtilityFunctions.BlendShapeTransitionFunction(transitionFunction, blendValue_old, blendValue, timeProgress, maxRangeBlendShapeValue);        
                                    part.SetBlendShapeWeight(index, blendValue);
                                }
                            }
                            yield return null;
                        }

                        // Set final values to amplitude * pair.Value
                        foreach (var blendShape in blendShapes)
                        {
                            foreach (SkinnedMeshRenderer part in body_parts_SK)
                            {
                                index = part.sharedMesh.GetBlendShapeIndex(blendShape.Key);
                                blendValue = UtilityFunctions.CalculatePercentage(blendShape.Value, amplitude); 
                                part.SetBlendShapeWeight(index, blendValue);
                            }
                        }
                    }
                }
            }

            //4th case of Animation -> Change from one phonem to another, set letter to "amplitude" and oldletter to 0
            else
            {
                if (blendShapesDictionary.ContainsKey(oldletter) && blendShapesDictionary.ContainsKey(letter))
                {
                    Dictionary<string,float> blendShapes = blendShapesDictionary[letter];
                    Dictionary<string,float> blendShapes_old = blendShapesDictionary[oldletter];
                    
                    while ((audioPlayed.GetComponent<AudioSource>().time < audioEndTime) && audioPlayed.GetComponent<AudioSource>().isPlaying)
                    {
                        float timeProgress = Mathf.InverseLerp(audioStartTime, audioEndTime, audioPlayed.GetComponent<AudioSource>().time);
                        
                        //Activation
                        foreach (var blendShape in blendShapes)
                        {
                            foreach (SkinnedMeshRenderer part in body_parts_SK)
                            {
                                index = part.sharedMesh.GetBlendShapeIndex(blendShape.Key);
                                blendValue_old = part.GetBlendShapeWeight(index);
                                blendValue = UtilityFunctions.CalculatePercentage(blendShape.Value, amplitude); 
                                blendValue = UtilityFunctions.BlendShapeTransitionFunction(transitionFunction, blendValue_old, blendValue, timeProgress, maxRangeBlendShapeValue);    
                                part.SetBlendShapeWeight(index, blendValue);
                            }
                        }

                        //Desactivation
                        foreach (var oldblendShape in blendShapes_old)
                        {
                            foreach (SkinnedMeshRenderer oldpart in body_parts_SK)
                            {
                                index_old = oldpart.sharedMesh.GetBlendShapeIndex(oldblendShape.Key);
                                blendValue_old = oldpart.GetBlendShapeWeight(index_old);
                                blendValue_old = UtilityFunctions.BlendShapeTransitionFunction(transitionFunction, blendValue_old, minRangeBlendShapeValue, timeProgress, maxRangeBlendShapeValue);                             
                                oldpart.SetBlendShapeWeight(index_old, blendValue_old);
                            }
                        }
                        yield return null;
                    }

                    // Set final values -> Activation
                    foreach (var blendShape in blendShapes)
                    {
                        foreach (SkinnedMeshRenderer part in body_parts_SK)
                        {
                            index = part.sharedMesh.GetBlendShapeIndex(blendShape.Key);
                            blendValue = UtilityFunctions.CalculatePercentage(blendShape.Value, amplitude); 
                            part.SetBlendShapeWeight(index, blendValue);
                        }
                    }

                    // Set final values -> Desactivation
                    foreach (var oldblendShape in blendShapes_old)
                    {
                        foreach (SkinnedMeshRenderer part in body_parts_SK)
                        {
                            index = part.sharedMesh.GetBlendShapeIndex(oldblendShape.Key);  
                            part.SetBlendShapeWeight(index, minRangeBlendShapeValue);
                        }
                    }
                }
            }
            yield return new WaitForEndOfFrame();
        }

        private IEnumerator WaitForIt(int position, double rtime, List<List<object>> data_lipSync)
        {
            while ((audioPlayed.GetComponent<AudioSource>().time - rtime) < (double)data_lipSync[position][1])
            {
                yield return new WaitForSecondsRealtime(0.01f);
                //yield return new WaitForFixedUpdate();
            }

            // Delay between the audio playback time and the timing it was supposed to wait for  (this is due to the 0.02s of imprecision from the audio playback time value)
            differenceAudioTiming = ((audioPlayed.GetComponent<AudioSource>().time - rtime) - (double)data_lipSync[position][1]);
        }

        private IEnumerator Syncro(List<List<object>> data_lipSync)
        {
            isTalking = true;
            gtime = Time.time;  //Initialise Time reference from game time
            rtime = Time.realtimeSinceStartup;  //Initialise Time reference from real time
            audioTime = audioPlayed.GetComponent<AudioSource>().time; //Initialise Time reference from audio time
            
            if (data_lipSync != null)
            {               
                yield return WaitForIt(0, audioTime, data_lipSync);  //Effet de bords start
                Debug.Log("Starting Talking Animation");
                Debug.Log("GlobalVariable differenceAudioTiming :" + differenceAudioTiming);

                //supposed first Duration - delay between audioPlayback and timing
                float firstDuration = (Convert.ToSingle(data_lipSync[1][1]) - Convert.ToSingle(data_lipSync[0][1])) - Convert.ToSingle(differenceAudioTiming);
                blendshapeAmplitude = (float)Convert.ToSingle(data_lipSync[0][2]);
                yield return StartCoroutine(PlayAnimation((string)data_lipSync[0][0], null, blendshapeAmplitude, firstDuration));
                
                for (int i = 1; i < data_lipSync.Count; i++)   //Boucle d'animation
                {
                    if (data_lipSync[i] != null)
                    {
                        foreach (object element in data_lipSync[i])
                        {
                            if (element == null)
                            {
                                Debug.LogError("Element inside data_lipSync[" + i + "] is null!");
                            }
                        }
                        
                        yield return WaitForIt(i, audioTime, data_lipSync);
                        float duration;
                        if (i == data_lipSync.Count - 1)
                        {
                            // Set the duration of the last phoneme to something really short
                            duration = 0.1f;
                        }
                        else
                        {
                            // Supposed Duration - delay between audioPlayback and timing (return value of coroutine)
                            duration = Convert.ToSingle(data_lipSync[i + 1][1]) - Convert.ToSingle(data_lipSync[i][1]) - Convert.ToSingle(differenceAudioTiming);
                        }

                        blendshapeAmplitude = (float)Convert.ToSingle(data_lipSync[i][2]);
                        yield return StartCoroutine(PlayAnimation((string)data_lipSync[i][0], (string)data_lipSync[i - 1][0], blendshapeAmplitude, duration));
                    
                        blendshapeAmplitude = UtilityFunctions.ScaleValue((float)Convert.ToSingle(data_lipSync[i][2]), 0f, 100f, minRangeBlendShapeValue, maxRangeBlendShapeValue);
                        newblendShapeValueAmplitude = blendshapeAmplitude * UnityEngine.Random.Range(0.5f,0.8f) / 10f;
                        newblendShapeValueAmplitudeTime = duration;
                        //currentBaseHeadRigRotation = BaseHeadRig.rotation;
                    }
                    else
                    {
                        Debug.Log("data_lipSync[" + i + "] is null");
                    }
                }
            }
            else
            {
                Debug.Log("[Warning] Data_lipSync is null");
            }
            blendshapeAmplitude = -1f;
            isTalking = false;
        }

        //Associer l'url de l'audio r√©cup√©r√© par la requ√®te chatbot √† un son physique sur Unity
        private IEnumerator GetAudioClip()
        {
            // Random sound ("hum", etc..)
            /*var random_speak = UnityEngine.Random.Range(0, 10);
            yield return new WaitForSeconds(1f);
            audioPlayed.GetComponent<AudioSource>().clip = audioClips[position];
            if (random_speak < 7)
            {
                audioPlayed.GetComponent<AudioSource>().Play();
            }
            */

            Debug.Log("Waiting Audio Response...");
            while (myResponse == null) //On met la coroutine en pause tant qu'on a pas eu la r ponse de CallAPI
            {
                yield return new WaitForSeconds(0.1f);
            }
            Debug.Log("Audio Response Received");

            //streamingtts = "https://rocky-taiga-14840.herokuapp.com/" + myResponse.tts;
            streamingtts = myResponse.tts;
            //response.tts = streamingtts;
            //Debug.Log(streamingtts);
            var headers = new Dictionary<string, string>();
            headers.Add("x-requested-with", "http://127.0.0.1:8080");

            using (UnityWebRequest www = UnityWebRequestMultimedia.GetAudioClip(streamingtts, AudioType.WAV))
            {
                www.SetRequestHeader("x-requested-with", "http://127.0.0.1:8080");

                yield return www.SendWebRequest();

                if (www.result == UnityWebRequest.Result.ProtocolError)
                {
                    Debug.LogError(www.error);
                }
                else
                {
                    audioReceived = DownloadHandlerAudioClip.GetContent(www);
                    audioPlayed.GetComponent<AudioSource>().clip = audioReceived;
                    Debug.Log("Audio is playing.");
                }
            }
        }

        private IEnumerator HelloAPI(string path)
        {
            www = null;
            Debug.Log("Ready?");
            using (www = UnityWebRequest.Get(path))
            {
                www.SetRequestHeader("Authorization", "Api-Key DiFfIY8V.OtXo0aj6l1oPhceGRGG3ndWW7b8OUeVt");

                yield return www.SendWebRequest();
                if (www.result == UnityWebRequest.Result.ProtocolError)
                {
                    Debug.LogError("Error While Sending: " + www.error);
                }
                else
                {
                    Response helloResponse = JsonConvert.DeserializeObject<Response>(www.downloadHandler.text);
                    Debug.Log("Yes!");
                }
            }

        }

        private IEnumerator CallAPI(string path, WWWForm form)
        {
            Debug.Log("Calling Api...");
            using (www = UnityWebRequest.Post(path, form))
            {
                www.SetRequestHeader("Authorization", "Api-Key DiFfIY8V.OtXo0aj6l1oPhceGRGG3ndWW7b8OUeVt");

                yield return www.SendWebRequest();

                if (www.result == UnityWebRequest.Result.ProtocolError)
                {
                    Debug.LogError("Error While Sending: " + www.error);
                }
                else
                {
                    myResponse = JsonConvert.DeserializeObject<Response>(www.downloadHandler.text);
                    Debug.Log("myResponse: " + www.downloadHandler.text);

                    if (myResponse != null)
                    {   
                        // Check list content
                        string logString = "AVANT My List Values: ";
                        foreach (List<object> innerList in myResponse.phonemes_list)
                        {
                            foreach (object value in innerList)
                            {
                                logString += value.ToString() + ", ";
                            }
                        }

                        ////Translate to your character's blendShapes through the glossary
                        //myResponse.phonemes_list = ReadGlossaryRT(myResponse.phonemes_list);

                        ////Check list content after glossary
                        //logString = "APRES My List Values: ";
                        //foreach (List<object> innerList in myResponse.phonemes_list)
                        //{
                        //    foreach (object value in innerList)
                        //    {
                        //        logString += value.ToString() + ", ";
                        //    }
                        //}
                        //Debug.Log(logString);

                        //For Audio
                        yield return StartCoroutine(GetAudioClip());
                        StartCoroutine(Syncro(myResponse.phonemes_list));
                        audioPlayed.GetComponent<AudioSource>().Play();
                    }
                    else
                    {
                        Debug.LogError("Api Response equals null.");
                    }
                   
                }

                // Reset response
                myResponse = null; 
            }
        }

        public void GeppettoTrigger(string text)
        {
            www = null;
            WWWForm form = new WWWForm();
            form.AddField("text", text);
            form.AddField("format", format);
            form.AddField("max_ampl", max_ampl.ToString());
            form.AddField("min_ampl", min_ampl.ToString());
            form.AddField("voice", voice);
            //form.AddField("silence_threshold", -90);
            //form.AddField("silence_time", 100);
            form.AddField("speed", speed.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture));
               
            StartCoroutine(CallAPI(apiPath, form));

            //myResponse = JsonConvert.DeserializeObject<Response>(fakeAPIResponse);
            //StartCoroutine(Syncro(myResponse.phonemes_list));
            ////audioPlayed.GetComponent<AudioSource>().PlayOneShot(audioReceived);
            //audioPlayed.GetComponent<AudioSource>().Play();

            //Debug.Log("Audio is playing.");


        }


        private IEnumerator BlinkCoroutine()
        {
            if (blinkIndex == null || blinkIndex.Count == 0)
            {
                Debug.LogWarning("(Blink) No blend shapes found in the SkinnedMeshRenderer of: " + blinkMesh.name);
                yield break;
            }
            isBlinking = false;
            float blinkBlendValue = blinkMesh.GetBlendShapeWeight(blinkIndex[0]);

            //Up
            while (blinkBlendValue < UtilityFunctions.CalculatePercentage(maxRangeBlendShapeValue, 90f))
            {
                blinkBlendValue += UtilityFunctions.CalculatePercentage(maxRangeBlendShapeValue, 10f);
                yield return new WaitForSeconds(blinkSpeed * 3f);

                foreach (int index in blinkIndex)
                {
                    blinkMesh.SetBlendShapeWeight(index, blinkBlendValue);
                }
            }

            //Down
            while (blinkBlendValue > minRangeBlendShapeValue)
            {
                blinkBlendValue -= UtilityFunctions.CalculatePercentage(maxRangeBlendShapeValue, 10f);
                yield return new WaitForSeconds(blinkSpeed);

                foreach (int index in blinkIndex)
                {
                    blinkMesh.SetBlendShapeWeight(index, blinkBlendValue);
                }
            }

            //Wait for next blink
            yield return new WaitForSeconds(blinkInterval + UnityEngine.Random.Range(-blinkRandomVariation, blinkRandomVariation));
            isBlinking = true;
        }

        public void Update()
        {            
            //We need to keep track of time for the lipsync
            timepassed = timepassed + Time.deltaTime;

            //Uncomment this to test your 3D Model
            if (Input.GetKeyDown(KeyCode.E))
            {
                GeppettoTrigger(text);
            }

            //Blink 
            if (blink && isBlinking)
            {
                StartCoroutine(BlinkCoroutine());
            }
        }

        public void LateUpdate()
        {
            if (BaseHeadRig != null)
            {
                /*if (IsTalking && blendshapeAmplitude > -1.0f)
                {                    
                    // Calculate the target rotation for the head bone
                    Quaternion targetRotation = currentBaseHeadRigRotation * Quaternion.Euler(Vector3.right * newblendShapeValueAmplitude);
                    BaseHeadRig.rotation = Quaternion.Lerp(BaseHeadRig.rotation, targetRotation, newblendShapeValueAmplitudeTime);
                }

                if (isFinishingTalking)
                {
                    BaseHeadRig.rotation = Quaternion.Lerp(BaseHeadRig.rotation, initialHeadRigRotation, newblendShapeValueAmplitudeTime);
                }*/
            }          
        } 
    }    
}

